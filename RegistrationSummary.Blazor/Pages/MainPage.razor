@page "/"

@using Microsoft.JSInterop
@using RegistrationSummary.Common.Enums
@using RegistrationSummary.Common.Models
@using RegistrationSummary.Blazor.ViewModels

@inject MainPageViewModel Vm
@inject IJSRuntime JS

@inject NavigationManager Navigation

<h2 class="text-2xl font-bold text-center mb-6">Event Management</h2>

@if (Vm.IsBusy)
{
    <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-40 z-50">
        <div class="flex flex-col items-center">
            <div class="spinner mb-4"></div>
            <div class="text-white text-lg font-semibold animate-pulse">Processing...</div>
        </div>
    </div>
}

@if (Vm.Events == null || !Vm.Events.Any())
{
    <p class="text-center text-gray-500">Loading events...</p>
}
else
{
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6">

        <div class="col-span-1 space-y-6">
            <div>
                <label class="font-semibold block mb-1">Select event:</label>
                <select @onchange="@(e => Vm.SelectEvent(e?.Value?.ToString() ?? string.Empty))" class="p-2 border rounded w-full">
                    <option disabled selected>-- select --</option>
                    @foreach (var ev in Vm.Events)
                    {
                        <option value="@ev.Name">@ev.Name</option>
                    }
                </select>

                <div class="flex gap-2 mt-2">
                    <button class="btn btn-sm btn-primary"
                            disabled="@(!Vm.CanEditSelected)"
                            @onclick="@(() => Navigation.NavigateTo($"/event/edit/{Vm.SelectedEvent.Id}"))">
                        ‚úèÔ∏è Edit
                    </button>

                    <button class="btn btn-sm btn-secondary"
                            @onclick="@(() => Navigation.NavigateTo("/event/new"))">
                        ‚ûï Add
                    </button>

                    <button class="btn btn-sm btn-accent"
                            disabled="@(!Vm.CanEditSelected)"
                            @onclick="Vm.CloneSelectedEventAsync">
                        üåÄ Clone
                    </button>
                </div>
            </div>

            @if (Vm.SelectedEvent is not null)
            {
                <div class="space-y-4">
                    <h3 class="text-md font-semibold">Email Actions</h3>

                    <!-- Real Emails -->
                    <div class="space-y-1">
                        <p class="text-sm text-gray-500">Send real emails</p>
                        @foreach (var type in Enum.GetValues<EmailType>())
                        {
                            <button class="btn btn-primary btn-sm w-full text-left" @onclick="() => Vm.SendEmailsAsync(type)">
                                Send @type
                            </button>
                        }
                    </div>

                    <!-- Test Emails -->
                    <div class="space-y-1 pt-4 border-t">
                        <p class="text-sm text-gray-500">Send test emails</p>
                        @foreach (var type in Enum.GetValues<EmailType>())
                        {
                            <button class="btn btn-secondary btn-sm w-full text-left" @onclick="() => Vm.SendEmailsAsync(type, true)">
                                Send @type (test)
                            </button>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- RIGHT COLUMN ‚Äì Main content -->
        <div class="col-span-1 md:col-span-3 space-y-6">
            @if (Vm.SelectedEvent is not null)
            {
                <!-- Event Info -->
                <div class="flex flex-wrap gap-6 border p-4 rounded bg-gray-100 text-sm">
                    <div><strong>Name:</strong> @Vm.SelectedEvent.Name</div>
                    <div><strong>Start Date:</strong> @Vm.SelectedEvent.StartDate.ToShortDateString()</div>
                </div>

                <!-- Courses Table -->
                <div>
                    <h3 class="text-lg font-semibold mb-2">Courses</h3>
                    <table class="w-full border border-collapse text-sm">
                        <thead class="bg-gray-200 border">
                            <tr>
                                <th class="border px-2 py-1">Code</th>
                                <th class="border px-2 py-1">Name</th>
                                <th class="border px-2 py-1">Day</th>
                                <th class="border px-2 py-1">Time</th>
                                <th class="border px-2 py-1">Solo</th>
                                <th class="border px-2 py-1">Location</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var course in Vm.SortedCourses)
                            {
                                <tr>
                                    <td class="border px-2 py-1">@course.Code</td>
                                    <td class="border px-2 py-1">@course.Name</td>
                                    <td class="border px-2 py-1">@course.DayOfWeek</td>
                                    <td class="border px-2 py-1">@course.FormattedTime</td>
                                    <td class="border px-2 py-1">@((course.IsSolo) ? "‚úì" : "")</td>
                                    <td class="border px-2 py-1">@course.Location</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Spreadsheet Actions -->
                <div>
                    <h4 class="text-md font-semibold mb-2">Spreadsheet Actions</h4>
                    <div class="flex flex-wrap gap-3">
                        <button class="btn btn-primary" @onclick="Vm.GenerateTabsAsync">Generate Tabs</button>
                        <button class="btn btn-primary" @onclick="Vm.ClearExcelAsync">Clear Excel</button>
                        @if (Vm.SelectedEvent.CoursesAreMerged)
                        {
                            <button class="btn btn-primary" @onclick="Vm.PopulateNewSignupsAsync" disabled="@(!Vm.CanPopulateNewSignups)">Populate New Signups</button>
                        }
                    </div>
                </div>
            }
    </div>
        </div>

    <!-- Log Output -->
    <div class="pt-4">
        <div class="bg-gray-100 border rounded font-mono text-sm whitespace-pre-wrap max-h-[300px] overflow-y-auto scroll-smooth">
            @foreach (var line in Vm.MessageLogLines)
            {
                <div class="@line.CssClass">@line.Text</div>
            }
        </div>
    </div>
}